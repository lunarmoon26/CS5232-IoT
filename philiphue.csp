channel zigbee 0;
channel wifi 0;
channel attackerbuffer 3;
var command;
var SD_ZFE_Connected = false;

var LinkBridge = false;

var nouce;

#define hash(i) {var hashVal = i;};

//#define newnouce(i) {var newnouce = i;}

enum {
	BeaconRequest, PanID, HubID, DeviceID, AssoPermit,
	UPnPMsearchRequest, CPIP, ServerName, HubIP, 
	SearchLightRequest, RequestSuccess, ScanRequest, ScanResponse,
	IdentifyRequest, NetworkJoinRequest, NetworkJoinResponse, LinkNetworkJoinResponse, 
	JoinNearestDeviceRequest, LinkScanRequest, LinkScanResponse, 
	LinkIdentifyRequest,LinkNetworkJoinRequest,
	RequestLightResult, LightNo, LightName, GetInfoRequest, 
	Configs, Lights, Whitelist, DeleteLightRequest,
	AdminSuccess, DeleteUserIDRequest, LinkButtonTrue, 
	Controlcmd, EncryptedControlcmd, ACK, ControlCmdSuccess, 
	CP, HS, ZFE, SD, Nobody,x
};

enum {
	TR1, TR2, TR3, TR4, TR5, TR6, TR7, TR8, TR9, TR10,
	TR11, TR12, TR13, TR14, TR15, TR16, TR17, TR18, TR19, TR20,
	TR21, TR22, TR23, TR24, TR25, TR26, TR27, TR28, TR29, TR30,
	TR31, TR32, TR33, TR34, TR35, TR36, TR37, TR38
};


var CP_Connects = Nobody;

//Discovery and pairing stage
SD_Proc() = SD_Discovery();

Hub_Proc() = ZFE_Discovery();

CP_Proc() = CP_Discovery();

SD_Discovery() = zigbee!BeaconRequest -> zigbee?PanID.HubID.AssoPermit -> zigbee!PanID.DeviceID 
				 -> zigbee?BeaconRequest -> zigbee!PanID.DeviceID.AssoPermit 
				 -> SD_Auth();
				 
ZFE_Discovery() = zigbee?BeaconRequest -> zigbee!PanID.HubID.AssoPermit -> zigbee?PanID.DeviceID 
				 -> zigbee!BeaconRequest -> zigbee?PanID.DeviceID.AssoPermit 
				 -> connection{SD_ZFE_Connected = true}
				 -> ZFE_Auth();


CP_Discovery() = wifi!UPnPMsearchRequest -> wifi?CPIP.ServerName.HubIP.HubID 
				-> CP_Auth();
				
HS_Discovery() = wifi?UPnPMsearchRequest -> wifi!CPIP.ServerName.HubIP.HubID 
				-> HS_Auth();
				



SD_Auth() = zigbee?ScanRequest.PanID 
			-> zigbee!HubID.PanID.ScanResponse 
			-> zigbee?DeviceID.IdentifyRequest
			-> executeCommand{command = IdentifyRequest} 
			-> zigbee?DeviceID.PanID.LinkNetworkJoinRequest
			-> zigbee!HubID.PanID.NetworkJoinResponse
			-> CP_Auth2();
			
			
SD_Auth2() = zigbee?LinkScanRequest.PanID
			-> zigbee!HubID.PanID.LinkScanResponse
			-> zigbee?DeviceID.LinkIdentifyRequest
			-> zigbee!DeviceID.PanID.LinkNetworkJoinRequest
			-> zigbee?HubID.PanID.LinkNetworkJoinResponse
			-> CP_Ctrl();
			
ZFE_Auth() = zigbee!ScanRequest.PanID 
			-> zigbee?HubID.PanID.ScanResponse 
			-> zigbee!DeviceID.IdentifyRequest 
			-> zigbee!DeviceID.PanID.LinkNetworkJoinRequest
			-> zigbee?HubID.PanID.NetworkJoinResponse
			-> HS_Auth2();
			
ZFE_Auth2() = zigbee!LinkScanRequest.PanID
			-> zigbee?HubID.PanID.LinkScanResponse
			-> zigbee!DeviceID.LinkIdentifyRequest
			-> zigbee?DeviceID.PanID.LinkNetworkJoinRequest
			-> zigbee!HubID.PanID.LinkNetworkJoinResponse
			-> HS_Ctrl();		
	
	
CP_Auth() = newnouce{nouce = x} -> wifi!HubIP.x ->  wifi?CPIP.hash(x) 
			-> wifi!HubIP.hash(x).SearchLightRequest -> wifi?CPIP.RequestSuccess
			-> SD_Auth();
			
CP_Auth2() = wifi!HubIP.hash().JoinNearestDeviceRequest -> wifi?CPIP.RequestSuccess->
			 SD_Auth2();
			
HS_Auth() = wifi?HubIP.x -> executeCommand{LinkBridge = true} 
			-> wifi!CPIP.hash(x) -> executeCommand{LinkBridge = false} 
			-> wifi?HubIP.hash(x).SearchLightRequest -> wifi!CPIP.RequestSuccess			
			-> ZFE_Auth();

HS_Auth2() = wifi?HubIP.hash(x).JoinNearestDeviceRequest -> wifi!CPIP.RequestSuccess
			-> ZFE_Auth2();





CP_Ctrl() = CP_LightRequest() [] CP_GetInfoRequest() [] CP_DeleteLightRequest()
		 [] CP_DeleteUserIDRequest() [] CP_GetAdminAccess();
HS_Ctrl() = HS_LightRequest() [] HS_GetInfoRequest() [] HS_DeleteLightRequest()
		 []HS_DeleteUserIDRequest() [] HS_GetAdminAccess();



CP_LightRequest() = wifi!HubIP.hash(x).RequestLightResult -> wifi?CPIP.LightNo.LightName
					-> CP_Ctrl();
					
HS_LightRequest() = wifi?HubIP.hash(x).RequestLightResult -> wifi!CPIP.LightNo.LightName
					-> HS_Ctrl();
					

CP_GetInfoRequest() = wifi!HubIP.hash(x).GetInfoRequest -> wifi?CPIP.Configs.Lights.Whitelist
					-> CP_Ctrl();
					
HS_GetInfoRequest() = wifi?HubIP.hash(x).GetInfoRequest -> wifi!CPIP.Configs.Lights.Whitelist
					-> HS_Ctrl();	

CP_DeleteLightRequest() = wifi!HubIP.hash(x).DeleteLightRequest -> wifi?CPIP.AdminSuccess
					-> CP_Ctrl();
					
HS_DeleteLightRequest() = wifi?HubIP.hash(x).DeleteLightRequest -> wifi!CPIP.AdminSuccess
					-> HS_Ctrl();
					
CP_DeleteUserIDRequest() = wifi!HubIP.hash(x).DeleteUserIDRequest -> wifi?CPIP.AdminSuccess
					-> CP_Ctrl();

HS_DeleteUserIDRequest() = wifi?HubIP.hash(x).DeleteUserIDRequest -> wifi!CPIP.AdminSuccess
					-> HS_Ctrl();
					
CP_GetAdminAccess() = wifi!HubIP.hash(x).LinkButtonTrue -> wifi? CPIP.AdminSuccess 
				-> wifi!HubIP.hash(x).Controlcmd -> SD_Ctrl();
SD_Ctrl() = zigbee?DeviceID.PanID.EncryptedControlcmd -> zigbee!HubIP.ACK -> CP_GetAdminAccessRes();

CP_GetAdminAccessRes() = wifi?CPIP.ControlCmdSuccess -> CP_Ctrl();
				
HS_GetAdminAccess() = wifi?HubIP.hash(x).LinkButtonTrue ->executeCommand{LinkBridge = true;} 
				-> wifi!CPIP.AdminSuccess -> wifi?HubIP.hash(x).Controlcmd -> ZFE_Ctrl(); 
				
ZFE_Ctrl() = zigbee!DeviceID.PanID.EncryptedControlcmd -> zigbee?HubIP.ACK -> HS_GetAdminAccessRes();
				
HS_GetAdminAccessRes() = wifi!CPIP.ControlCmdSuccess -> HS_Ctrl();


		
zigbeeSystem = SD_Proc() ||| Hub_Proc();

wifiSystem = Hub_Proc()||| CP_Proc();


#assert zigbeeSystem deadlockfree; 
#assert wifiSystem deadlockfree; 				
