channel zigbee 0;
channel wifi 0;
channel attackerBuffer 3;

enum {
	BeaconRequest, PanID, HubID, DeviceID, AssoPermit,
	UPnPMsearchRequest, CPIP, AttackerIP, ServerName, HubIP, 
	SearchLightRequest, RequestSuccess, ScanRequest, ScanResponse,
	IdentifyRequest, NetworkJoinRequest, NetworkJoinResponse, LinkNetworkJoinResponse, 
	JoinNearestDeviceRequest, LinkScanRequest, LinkScanResponse, 
	LinkIdentifyRequest,LinkNetworkJoinRequest,
	RequestLightResult, LightNo, LightName, GetInfoRequest, 
	Configs, Lights, Whitelist, DeleteLightRequest,
	AdminSuccess, DeleteUserIDRequest, LinkButtonTrue, 
	Controlcmd, EncryptedControlcmd, ACK, ControlCmdSuccess, 
	CP, HS, ZFE, SD, Nobody, CP_nonce, CP_hashed_nonce, 
	Attacker_nonce, Attacker_hashed_nonce, AttackerHubID,
	AttackerDeviceID, AttackerReplay
};

//var HS_Whitelist = Nobody;
var cPWhitelisted = false;
var attackerWhitelisted = false;
var linkButton = false;

var Network_HubID = Nobody;
var New_DeviceID = Nobody;
var Bridge_HubIP = Nobody;

var sDJoinedNetwork = false;
var attackerAuth = false;
var attackerCmdControl = false;
var attackerAdminControl = false;
var sDHijacked = false;
var controlModified = false;

SD_Proc() = SD_Discovery();
HS_Proc() = HS_Discovery();
ZFE_Proc() = ZFE_Discovery();
CP_Proc() = CP_Discovery();


//====================S1: Discovery Stage====================

SD_Discovery() = 
	SD_NetworkDiscovery() [] 
	SD_DeviceDiscovery();
ZFE_Discovery() = 
	ZFE_NetworkDiscovery() [] 
	ZFE_DeviceDiscovery();

SD_NetworkDiscovery() = 
	zigbee!BeaconRequest -> 
	zigbee?PanID.hub_id.AssoPermit -> 
	NetworkHubDiscovered{Network_HubID = hub_id} ->
	zigbee!PanID.DeviceID ->
	SD_JoinNetwork();
 
ZFE_NetworkDiscovery() = 
	zigbee?BeaconRequest -> 
	zigbee!PanID.HubID.AssoPermit -> 
	zigbee?PanID.device_id ->
	NewDeviceDiscovered{New_DeviceID = device_id} -> 
	ZFE_JoinNetwork();

SD_DeviceDiscovery() = 
	zigbee?BeaconRequest.hub_id -> 
	NetworkHubDiscovered{Network_HubID = hub_id} ->
	zigbee!PanID.DeviceID.AssoPermit ->
	SD_JoinDevice();

ZFE_DeviceDiscovery() = 
	zigbee!BeaconRequest.HubID -> 
	zigbee?PanID.device_id.AssoPermit ->
	NewDeviceDiscovered{New_DeviceID = device_id} ->
	ZFE_JoinDevice();

CP_Discovery() = 
	wifi!UPnPMsearchRequest.CPIP -> 
	wifi?CPIP.ServerName.hub_ip.hub_id ->
	ServerDiscovered{Bridge_HubIP = hub_ip} ->
	CP_Auth();
				
HS_Discovery() = 
	wifi?UPnPMsearchRequest.cp_ip ->
	wifi!cp_ip.ServerName.HubIP.HubID -> 
	HS_Auth();
				

//SystemStage1() = SD_Discovery() ||| ZFE_Discovery() ||| CP_Discovery() ||| HS_Discovery();



//====================S2: Authentication Stage====================

// TR 9-10
CP_Auth() = 
	newnonce.CP_nonce -> 
	wifi!Bridge_HubIP.CP_nonce ->  
	wifi?CPIP.hash_x ->
	CP_SendRequest(hash_x);

HS_Auth() = 
	wifi?HubIP.x ->  
	HS_AuthFromNonce(x);
	
HS_AuthFromNonce(x) = 
	ifa(x == CP_nonce){
		executeCommand{linkButton = true} -> 
		wifi!CPIP.CP_hashed_nonce -> 
		CPConnected{cPWhitelisted = true} ->
		executeCommand{linkButton = false} -> 
		HS_ReceiveRequest()
	}
	else{
		executeCommand{linkButton = true} -> 
		wifi!AttackerIP.Attacker_hashed_nonce -> 
		CPConnected{attackerWhitelisted = true} ->
		executeCommand{linkButton = false} -> 
		HS_ReceiveRequest()
	};

// TR 11-17
CP_SendSearchLightRequest(hash_x) = 
	wifi!Bridge_HubIP.hash_x.SearchLightRequest -> 
	wifi?CPIP.RequestSuccess -> 
	CP_SendRequest(hash_x);
	
HS_ReceiveSearchLightRequest() = 
	wifi?HubIP.x.SearchLightRequest -> 
	HS_SearchLightResponse();

ZFE_JoinNetwork() = 
	zigbee!ScanRequest.PanID -> 
	zigbee?HubID.PanID.ScanResponse -> 
	zigbee!New_DeviceID.IdentifyRequest -> 
	zigbee!New_DeviceID.PanID.NetworkJoinRequest -> 
	zigbee?HubID.PanID.NetworkJoinResponse -> 
	HS_ReceiveRequest();

SD_JoinNetwork() = 
	zigbee?ScanRequest.PanID -> 
	zigbee!Network_HubID.PanID.ScanResponse -> 
	zigbee?DeviceID.IdentifyRequest -> 
	executeCommand.IdentifyRequest -> 
	zigbee?DeviceID.PanID.NetworkJoinRequest -> 
	zigbee!Network_HubID.PanID.NetworkJoinResponse -> 
	JoinToNetwork{sDJoinedNetwork = true} ->
	SD_TouchLink();



// TR 18-24
CP_SendJoinNearestDeviceRequest(hash_x) = 
	wifi!Bridge_HubIP.hash_x.JoinNearestDeviceRequest -> 
	wifi?CPIP.RequestSuccess->
	CP_SendRequest(hash_x);

HS_ReceiveJoinNearestDeviceRequest() = 
	wifi?HubIP.x.JoinNearestDeviceRequest -> 
	HS_JoinNearestDeviceResponse();
	
ZFE_JoinDevice() = 
	zigbee!LinkScanRequest.PanID -> 
	zigbee?HubID.PanID.LinkScanResponse -> 
	zigbee!New_DeviceID.LinkIdentifyRequest -> 
	zigbee!New_DeviceID.PanID.LinkNetworkJoinRequest -> 
	zigbee?HubID.PanID.LinkNetworkJoinResponse ->
	HS_ReceiveRequest();
	
SD_JoinDevice() = 
	zigbee?LinkScanRequest.PanID -> 
	zigbee!Network_HubID.PanID.LinkScanResponse -> 
	zigbee?DeviceID.LinkIdentifyRequest -> 
	executeCommand.LinkIdentifyRequest -> 
	zigbee?DeviceID.PanID.LinkNetworkJoinRequest -> 
	zigbee!Network_HubID.PanID.LinkNetworkJoinResponse -> 
	JoinToNetwork{sDJoinedNetwork = true} ->
	SD_TouchLink();

SD_TouchLink() = SD_DeviceDiscovery() [] SD_ReceiveRequest();
	
HS_SearchLightResponse() = 
	ifa(cPWhitelisted){
		wifi!CPIP.RequestSuccess -> 
		ZFE_JoinNetwork()
	}
	[] ifa(attackerWhitelisted){
		wifi!AttackerIP.RequestSuccess -> 
		ZFE_JoinNetwork()
	}
	[] HS_ReceiveRequest();

HS_JoinNearestDeviceResponse() = 
	ifa(cPWhitelisted){
		wifi!CPIP.RequestSuccess -> 
		ZFE_JoinDevice()
	}
	[] ifa(attackerWhitelisted){
		wifi!AttackerIP.RequestSuccess -> 
		ZFE_JoinDevice()
	}
	[] HS_ReceiveRequest();

CP_SendRequest(hash_x) = 
	CP_SendSearchLightRequest(hash_x) []
	CP_SendJoinNearestDeviceRequest(hash_x) []
	CP_RequestLightResult(hash_x) []
	CP_GetInfoRequest(hash_x);
	
HS_ReceiveRequest() = 
	HS_ReceiveSearchLightRequest() []
	HS_ReceiveJoinNearestDeviceRequest() []
	HS_RequestLightResult() []
	HS_GetInfoRequest();	
	
SD_ReceiveRequest() = 
	SD_JoinNetwork() []
	SD_JoinDevice() []
	SD_Controlcmd();
	
//SystemStage2() = CP_Auth() ||| HS_Auth() ||| SD_ReceiveRequest();



//====================S3: Control Stage====================


CP_SendAdminControlRequest(hash_x) = 
	CP_GetInfoRequest(hash_x) [] 
	CP_DeleteLightRequest(hash_x) [] 
	CP_DeleteUserIDRequest(hash_x) [] 
	CP_LinkButtonTrue(hash_x) []
	CP_SendRequest(hash_x);
	
HS_ReceiveAdminControlRequest() = 
	HS_GetInfoRequest() [] 
	HS_DeleteLightRequest() []
	HS_DeleteUserIDRequest() [] 
	HS_LinkButtonTrue() []
	HS_ReceiveRequest();
	
CP_SendControlRequest(hash_x) = 
	CP_RequestLightResult(hash_x) [] 
	CP_Controlcmd(hash_x) []
	CP_SendRequest(hash_x);
	
HS_ReceiveControlRequest() = 
	HS_RequestLightResult() [] 
	HS_Controlcmd() []
	HS_ReceiveRequest();
	

// TR 25-26
CP_RequestLightResult(hash_x) = 
	wifi!Bridge_HubIP.hash_x.RequestLightResult -> 
	wifi?CPIP.LightNo.LightName -> 
	CP_SendControlRequest(hash_x);
	
HS_RequestLightResult() = 
	wifi?HubIP.x.RequestLightResult -> 
	HS_LightResultResponse();


// TR 27-34
CP_GetInfoRequest(hash_x) = 
	wifi!Bridge_HubIP.hash_x.GetInfoRequest -> 
	wifi?CPIP.Configs.Lights.Whitelist -> 
	CP_SendAdminControlRequest(hash_x);
	
HS_GetInfoRequest() = 
	wifi?HubIP.x.GetInfoRequest -> 
	HS_GetInfoResponse();


CP_DeleteLightRequest(hash_x) = 
	wifi!Bridge_HubIP.hash_x.DeleteLightRequest -> 
	wifi?CPIP.AdminSuccess -> 
	CP_SendAdminControlRequest(hash_x);
					
HS_DeleteLightRequest() = 
	wifi?HubIP.x.DeleteLightRequest -> 
	HS_AdminSuccessResponse();
					
CP_DeleteUserIDRequest(hash_x) = 
	wifi!Bridge_HubIP.hash_x.DeleteUserIDRequest -> 
	wifi?CPIP.AdminSuccess -> 
	CP_SendAdminControlRequest(hash_x);

HS_DeleteUserIDRequest() = 
	wifi?HubIP.x.DeleteUserIDRequest -> 
	HS_AdminSuccessResponse();

CP_LinkButtonTrue(hash_x) = 
	wifi!Bridge_HubIP.hash_x.LinkButtonTrue -> 
	wifi?CPIP.AdminSuccess -> 
	CP_SendAdminControlRequest(hash_x);

HS_LinkButtonTrue() = 
	wifi?HubIP.x.LinkButtonTrue -> 
	executeCommand{linkButton = true} -> 
	HS_AdminSuccessResponse();


// TR 35-38
CP_Controlcmd(hash_x) = 
	wifi!Bridge_HubIP.hash_x.Controlcmd -> 
	wifi?CPIP.ControlCmdSuccess ->
	CP_SendRequest(hash_x);

HS_Controlcmd() = 
	wifi?HubIP.x.Controlcmd -> 
	HS_ControlSuccessResponse();
	

HS_LightResultResponse() = 
	ifa(cPWhitelisted){
		wifi!CPIP.LightNo.LightName -> 
		HS_ReceiveControlRequest()
	}
	[] ifa(attackerWhitelisted){
		wifi!AttackerIP.LightNo.LightName -> 
		HS_ReceiveControlRequest()
	}
	[] HS_ReceiveControlRequest();
	

HS_GetInfoResponse() = 
	ifa(cPWhitelisted){
		wifi!CPIP.Configs.Lights.Whitelist -> 
		HS_ReceiveAdminControlRequest()
	}
	[] ifa(attackerWhitelisted){
		wifi!AttackerIP.Configs.Lights.Whitelist -> 
		HS_ReceiveAdminControlRequest()
	}
	[] HS_ReceiveAdminControlRequest();


HS_AdminSuccessResponse() = 
	ifa(cPWhitelisted){
		wifi!CPIP.AdminSuccess -> 
		HS_ReceiveRequest()
	} 
	[] ifa(attackerWhitelisted){
		wifi!AttackerIP.AdminSuccess -> 
		HS_ReceiveRequest()
	}
	[] HS_ReceiveRequest();
	
HS_ControlSuccessResponse() = 
	ifa(cPWhitelisted){
		zigbee!New_DeviceID.PanID.EncryptedControlcmd -> 
		zigbee?HubID.ACK -> 
		wifi!CPIP.ControlCmdSuccess ->
		HS_ReceiveRequest()
	}
	[] ifa(attackerWhitelisted){
		zigbee!New_DeviceID.PanID.EncryptedControlcmd -> 
//		attackerControl{attackerCmdControl = true} ->
		zigbee?HubIP.ACK -> 
		wifi!AttackerIP.ControlCmdSuccess ->
		HS_ReceiveRequest()
	} 
	[] HS_ReceiveRequest();


SD_Controlcmd() = 
	zigbee?DeviceID.PanID.EncryptedControlcmd -> 
	executeCommand.EncryptedControlcmd -> 
	zigbee!Network_HubID.ACK -> 
	SD_ReceiveRequest();

//SystemStage3() = CP_SendAdminControlRequest() ||| HS_ReceiveAdminControlRequest() ||| SD_Controlcmd();


Attacker_Proc() = 
	AttackerAsCP() [] 
	AttackerAsHub() []
	AttackerRelay();


// Attacker behaviour
AttackerAsCP() =
	wifi!UPnPMsearchRequest.AttackerIP -> 
	wifi?AttackerIP.ServerName.hub_ip.hub_id ->
	wifi!hub_ip.Attacker_nonce ->  
	wifi?AttackerIP.Attacker_hashed_nonce ->
	authAttacker{attackerAuth = true} ->
	AttackerControl(hub_ip, Attacker_hashed_nonce);
	
AttackerControl(hub_ip, hash_x) = 
	AttackerAdminControl(hub_ip, hash_x) []
	AttackerCmdControl(hub_ip, hash_x);

AttackerCmdControl(hub_ip, hash_x) = 
	wifi!hub_ip.hash_x.RequestLightResult -> 
	wifi?AttackerIP.LightNo.LightName -> 
	wifi!hub_ip.hash_x.Controlcmd -> 
	wifi?AttackerIP.ControlCmdSuccess ->
//	attackerControl{attackerCmdControl = true} ->
	Attacker_Proc();

AttackerAdminControl(hub_ip, hash_x) = 
	wifi!hub_ip.hash_x.GetInfoRequest -> 
	wifi?AttackerIP.Configs.Lights.Whitelist ->
	wifi!hub_ip.hash_x.DeleteUserIDRequest ->
	wifi?AttackerIP.AdminSuccess -> 
	removeCPAccess{cPWhitelisted = false; attackerAdminControl = true} ->
	Attacker_Proc();

// Using TouchLink Protocol
AttackerAsHub() = 
	zigbee!BeaconRequest.AttackerHubID -> 
	zigbee?PanID.benign_device_id.AssoPermit ->
	zigbee!LinkScanRequest.PanID -> 
	zigbee?AttackerHubID.PanID.LinkScanResponse -> 
	zigbee!benign_device_id.LinkIdentifyRequest -> 
	zigbee!benign_device_id.PanID.LinkNetworkJoinRequest -> 
	zigbee?AttackerHubID.PanID.LinkNetworkJoinResponse -> 
	hijack_connected_sd{sDHijacked = true} ->
	Attacker_Proc();
	
//AttackerAsSD() = 
//	zigbee!BeaconRequest -> 
//	zigbee?PanID.hub_id.AssoPermit -> 
//	NetworkHubDiscovered{Network_HubID = hub_id} ->
//	zigbee!PanID.AttackerDeviceID ->
//	SD_JoinNetwork();

AttackerRelay() = 
	attackerBuffer?x.y.AttackerAuthRequest -> AttackerControl(x, y)
	[] attackerBuffer?x.y.Controlcmd.AttackerReplay -> wifi!x.y.Controlcmd{controlModified = true} -> Attacker_Proc()
	[] wifi?x.y.z -> attackerBuffer!x.y.z.AttackerReplay -> Attacker_Proc();
//               [] network?y.z -> attackerBuffer!y.z -> AttackerProc() 
//               [] network?attacker_server_key.y -> network!y -> AttackerProc() 
//               [] network?y.z -> network!attacker_server_key.y.z -> AttackerProc();

	
System = SD_Proc() ||| HS_Proc() |||  ZFE_Proc()||| CP_Proc();
System_With_Attacker = SD_Proc() ||| HS_Proc() |||  ZFE_Proc()||| CP_Proc() ||| Attacker_Proc();


#define SD_JoinedNetwork sDJoinedNetwork == true;

#define Violation_AttackerAuth attackerAuth == true;
#define Violation_UnauthAdminControl attackerAdminControl == true;
#define Violation_UnauthCmdControl attackerCmdControl == true;
#define Violation_ModifyControl controlModified == true;
#define Violation_HijackDevice sDHijacked == true;



#assert System deadlockfree;
#assert System reaches SD_JoinedNetwork;

#assert System_With_Attacker reaches Violation_AttackerAuth;
#assert System_With_Attacker reaches Violation_UnauthAdminControl;
#assert System_With_Attacker reaches Violation_UnauthCmdControl;
#assert System_With_Attacker reaches Violation_ModifyControl;
#assert System_With_Attacker reaches Violation_HijackDevice;