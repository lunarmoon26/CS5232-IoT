channel network 0; 
channel attackerBuffer 3; 

var CP_connects = Nobody; 
var SD_connects = Nobody; 
var Attacker_connects = Nobody;
var attacker_server_connected = false; 

enum{ 
 GetService, 
 StateService, 
 SetAccessPoint, 
 StateAccessPoint, 
 Configured, 
 SetPowerRequest, 
 Success, 
 SetColorRequest, 
 GetLights, 
 LightsState,  
 CP, 
 SD, 
 Attacker, 
 Nobody 
}; 


// Attacker Behaviour

AttackerProc() = AttackerAsSD()[]AttackerAsCPDiscovery()

AttackerAsSD() = network?SD.LightsState -> attackerBuffer!SD.LightsState -> AttackerProc();

AttackerAsCPDiscovery() = 
network!Attacker.GetService ->
network?StateService ->
{Attacker_connects = SD}

AttackerAsCPConfiguration()


// Stage 1: Discover smart devices 
CPNextStage() = CPConfiguration()[]CPSendCommand()

CPDiscovery() =  
 network!CP.GetService -> 
 network?StateService ->
 {CP_connects = SD}
 -> CPNextStage();

SDNextStage() = SDConfiguration()[]SDSendCommand()


SDDiscovery() =  
 network?GetService -> 
 network!StateService -> SDNextStage(); 

 
SystemStage1 = CPDiscovery()|||SDDiscovery();  

 

// Stage 2: Setup connections with smart devices 

CPConfiguration() =  
 network!SetAccessPoint -> 
 network?StateAccessPoint -> 
 network?StateService.Configured -> 
 network!SetPowerRequest -> CPSendCommand(); 

  

SDConfiguration() = 
 network?SetAccessPoint -> 
 network!StateAccessPoint -> 
 network!StateService.Configured -> 
 network?SetPowerRequest -> SDReceiveCommand(); 

SystemStage2 = CPConfiguration() ||| SDConfiguration(); 

// Stage 3: Send command to smart devices 

 CPSendCommand() = CPSetPowerRequest() -> 
				   CPSetColorRequest() -> 
				   CPGetLights();


 CPSetPowerRequest() =  
 network!CP.SetPowerRequest ->
 CommandSuccess(CP);

  
 CPSetColorRequest() = 
 network!CP.SetColorRequest -> 
 CommandSuccess(CP);

 CPGetLights() =  
 network!CP.GetLights ->  
 network?LightsState -> CPSendCommand(); 

 CommandSuccess(x) = network?x.Success-> CPSendCommand(); 

 
 SDReceiveCommand() = SDSetPowerRequest()[]SDSetColorRequest()[]SDGetLights(); 

 
SDSetPowerRequest() =  
 network!x.SetPowerRequest ->
 SDExcuteCommand(x) ->
 SDCommandSuccess();

  

SDSetColorRequest() = 
 network!x.SetColorRequest -> 
 SDExcuteCommand(x) -> 
 SDCommandSuccess();

  

SDGetLights() =  
 network!GetLights ->  
 network?LightsState -> 
 SDReceiveCommand();

SDCommandSuccess() = network!Success-> SDReceiveCommand(); 

SDExcuteCommand(x) = 
	if(x == CP) {
		SD_connects = CP;
	} else {
		SD_connects = Attacker;
	}

 

system = SDReceiveCommand() ||| CPSendCommand(); 

 

  

//#assert SystemStage1() deadlockfree; 
//#assert SystemStage2() deadlockfree; 
#define violation SD_connects = Attacker && SD_connects == CP && CP_connects == SD;

#assert system deadlockfree; 
#assert system reaches violation;