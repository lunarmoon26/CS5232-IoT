channel network 0; 
channel attackerBuffer 3; 

var CP_connects = Nobody; 
var SD_connects = Nobody; 
var attacker_server_connected = false; 

enum{ 
 GetService, 
 StateService, 
 SetAccessPoint, 
 StateAccessPoint, 
 Configured, 
 SetPowerRequest, 
 Success, 
 SetColorRequest, 
 GetLights, 
 LightsState,  
 CP, 
 SD, 
 Attacker, 
 CP_SD_key,  
 attacker_SD_key, 
 Nobody 
}; 

 

// Stage 1: Discover smart devices 

CPDiscovery() =  
 network!CP.GetService -> 
 network?StateService -> CPConfiguration(); 

  

SDDiscovery() =  
 network?GetService -> 
 network!StateService -> SDConfiguration(); 

  

//SystemStage1() = CPDiscovery()|||SDDiscovery();  

 

// Stage 2: Setup connections with smart devices 

CPConfiguration() =  
 network!SetAccessPoint -> 
 network?StateAccessPoint -> 
 network?StateService.Configured -> 
 network!SetPowerRequest -> CPSendCommand(); 

  

SDConfiguration() = 
 network?SetAccessPoint -> 
 network!StateAccessPoint -> 
 network!StateService.Configured -> 
 network?SetPowerRequest -> SDReceiveCommand(); 

//SystemStage2() = CPConfiguration() ||| SDConfiguration(); 

// Stage 3: Send command to smart devices 

CPSendCommand() = CPSetPowerRequest()[]CPSetColorRequest()[]CPGetLights(); 

 

CPSetPowerRequest() =  
 network!SetPowerRequest -> CPCommandSuccess();

  

CPSetColorRequest() = 

 network!SetColorRequest -> CPCommandSuccess(); 

  

CPGetLights() =  
 network!GetLights ->  
 network?LightsState -> CPSendCommand(); 

CPCommandSuccess() = network?Success-> CPSendCommand(); 

 
SDReceiveCommand() = SDSetPowerRequest()[]SDSetColorRequest()[]SDGetLights(); 

 
SDSetPowerRequest() =  
 network!x.SetPowerRequest ->
 SDExcuteCommand(x) ->
 SDCommandSuccess();

  

SDSetColorRequest() = 
 network!x.SetColorRequest -> 
 SDExcuteCommand(x) -> 
 SDCommandSuccess();

  

SDGetLights() =  
 network!GetLights ->  
 network?LightsState -> 
 SDReceiveCommand();

SDCommandSuccess() = network!Success-> SDReceiveCommand(); 

SDExcuteCommand(x) = 
	if(x == CP) {
		SD_connects = CP;
	} else {
		SD_connects = Attacker;
	}

 

system = SDReceiveCommand() ||| CPSendCommand(); 

 

  

//#assert SystemStage1() deadlockfree; 
//#assert SystemStage2() deadlockfree; 
#define violation SD_connects = Attacker && SD_connects == CP && CP_connects == SD;

#assert system deadlockfree; 
#assert system reaches violation;