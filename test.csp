channel network 0; 
channel attackerBuffer 3; 

var CP_connects = Nobody; 
var SD_connects = Nobody; 
var Attacker_connects = Nobody;
var attacker_server_connected = false; 

enum{ 
 GetService, 
 StateService, 
 SetAccessPoint, 
 StateAccessPoint, 
 Configured, 
 SetPowerRequest, 
 Success, 
 SetColorRequest, 
 GetLights, 
 LightsState,  
 CP, 
 SD, 
 Attacker, 
 Nobody 
}; 


// Attacker Behaviour

//AttackerProc() = AttackerAsSD()[]AttackerAsCPDiscovery()

//AttackerAsSD() = network?SD.LightsState -> attackerBuffer!SD.LightsState -> AttackerProc();

AttackerAsCPDiscovery() = 
network!Attacker.GetService ->
network?StateService ->
attacker_SD_connected{Attacker_connects = SD} ->
AttackerAsCPConfiguration() 


AttackerAsCPConfiguration() =
 network!Attacker.SetAccessPoint -> 
 network?StateAccessPoint -> 
 network?StateService.Configured ->
 AttackerSendCommand();
				   		
 AttackerSetPowerRequest() =  
 network!Attacker.SetPowerRequest ->
 AttackerCommandSuccess();

  
 AttackerSetColorRequest() = 
 network!Attacker.SetColorRequest -> 
 AttackerCommandSuccess();

 AttackerGetLights() =  
 network!Attacker.GetLights ->  
 network?LightsState -> 
 AttackerSendCommand();				   		

AttackerSendCommand() = AttackerSetPowerRequest()[] AttackerSetColorRequest()[]AttackerGetLights();
AttackerCommandSuccess() = network?Success-> AttackerSendCommand();

// Stage 1: Discover smart devices 

CPNextStage() = CPConfiguration()[]CPSendCommand()

CPDiscovery() =  
 network!CP.GetService -> 
 network?StateService ->
 CP_SD_connected{CP_connects = SD} -> CPNextStage();


SDNextStage() = SDConfiguration()[]SDSendCommand();

SDDiscovery() =  
 network?x.GetService -> 
 network!StateService ->
 SDNextStage();

 
SystemStage1 = CPDiscovery()|||SDDiscovery();  

 

// Stage 2: Setup connections with smart devices 

CPConfiguration() =  
 network!CP.SetAccessPoint -> 
 network?StateAccessPoint -> 
 network?StateService.Configured ->
 CPSendCommand();

  

SDConfiguration() = 
 network?SetAccessPoint -> 
 network!StateAccessPoint -> 
 network!StateService.Configured ->
 SDReceiveCommand();

SystemStage2 = CPConfiguration() ||| SDConfiguration(); 

// Stage 3: Send command to smart devices 

 CPSendCommand() = CPSetPowerRequest() [] CPSetColorRequest() [] CPGetLights();

 CPSetPowerRequest() =  
 network!CP.SetPowerRequest ->
 CPCommandSuccess();

  
 CPSetColorRequest() = 
 network!CP.SetColorRequest -> 
 CPCommandSuccess();

 CPGetLights() =  
 network!CP.GetLights ->  
 network?LightsState -> 
 CPSendCommand();

 CPCommandSuccess() = network?Success-> CPSendCommand();

 
SDReceiveCommand() = SDSetPowerRequest()[]SDSetColorRequest()[]SDGetLights(); 

SDSetPowerRequest() =  
 network!x.SetPowerRequest ->
 SDExcuteCommand(x) ->
 SDCommandSuccess();

SDSetColorRequest() = 
 network!x.SetColorRequest -> 
 SDExcuteCommand(x) -> 
 SDCommandSuccess();

SDGetLights() =  
 network!GetLights ->  
 network?LightsState -> 
 SDReceiveCommand();

SDCommandSuccess() = network!Success-> SDReceiveCommand(); 

SDExcuteCommand(x) = 
	if(x == CP) {
		SD_connects = CP;
	} else {
		SD_connects = Attacker;
	}

 

system = SDReceiveCommand() ||| CPSendCommand(); 

attackerSystem = SDReceiveCommand() ||| AttackerSendCommand();

  

//#assert SystemStage1() deadlockfree; 
//#assert SystemStage2() deadlockfree; 
#define violation SD_connects = Attacker && SD_connects == CP && CP_connects == SD;

#assert system deadlockfree; 
#assert system reaches violation;
#assert attackerSystem reaches violation;