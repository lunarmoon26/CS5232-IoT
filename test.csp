channel wifi 0; 
channel openwifi 0;
channel attackerBuffer 3; 

var CP_connects = Nobody; 
var SD_connects = Nobody; 
var Attacker_connects = Nobody;
var attacker_execute_command = false;


enum { 
 GetService, 
 StateService, 
 Configured, 
 Station,
 Username,
 Password,
 EncodedPassword, 
 SetPowerRequest, 
 Success, 
 SetColorRequest, 
 GetLights, 
 LightsState,  
 CP, 
 SD, 
 Attacker, 
 Nobody 
}; 


////Attacker Behaviour
//AttackerProc() = AttackerAsCPDiscovery()[]AttackerAsCPConfiguration()[]AttackerRelay();
//
//AttackerAsCPDiscovery() = network!Attacker.GetService -> network?StateService -> attacker_SD_connected{Attacker_connects = SD} ->
//						AttackerNextStage();
//AttackerNextStage() = AttackerAsCPConfiguration()[]AttackerAsCPSendCommand();
//
//AttackerAsCPConfiguration() = network!Attacker.SetAccessPoint -> network?StateAccessPoint -> 
//						network?StateService.Configured -> attacker_SD_connected{Attacker_connects = SD} ->
//						AttackerAsCPSendCommand();
//
//AttackerAsCPSendCommand() = AttackerSetPowerRequest()[] AttackerSetColorRequest()[]AttackerGetLights();
//
//AttackerSetPowerRequest() = network!Attacker.SetPowerRequest -> network?Success-> 
//							attackerExecuteCommand{attacker_execute_command = true} -> AttackerAsCPSendCommand();
//AttackerSetColorRequest() = network!Attacker.SetColorRequest -> network?Success->
//							attackerExecuteCommand{attacker_execute_command = true} -> AttackerAsCPSendCommand();
//AttackerGetLights() = network!Attacker.GetLights -> network?LightsState -> 
//							attackerExecuteCommand{attacker_execute_command = true} -> AttackerAsCPSendCommand();				   		
//
//AttackerRelay() = attackerBuffer?StateService -> network!CP -> AttackerProc()
//               [] attackerBuffer?StateAccessPoint -> network!CP -> AttackerProc();




CPProc() = CPDiscovery(); 

CPDiscovery_WIFI() = network!CP.GetService -> network?StateService ->CP_SD_connected{CP_connects = SD} -> 
			    CPNextStage();
			    
CPNextStage_WIFI() = CPConfiguration()[]CPSendCommand();

CPConfiguration_WIFI() = network!CP.SetAccessPoint -> network?StateAccessPoint -> network?StateService.Configured ->
                    CPSendCommand_WIFI();
                    
CPSendCommand_WIFI() = CPSetPowerRequest_WIFI() [] CPSetColorRequest_WIFI() [] CPGetLights_WIFI();

CPSetPowerRequest_WIFI() = network!CP.SetPowerRequest -> network?Success-> CPSendCommand_WIFI();
CPSetColorRequest_WIFI() = network!CP.SetColorRequest -> network?Success-> CPSendCommand_WIFI();
CPGetLights_WIFI() = network!CP.GetLights -> network?LightsState -> CPSendCommand_WIFI();
 
CPDiscovery_OPENWIFI() = network!CP.GetService -> network?StateService ->CP_SD_connected{CP_connects = SD} -> 
			    CPNextStage_OPENWIFI();
			    
CPNextStage_OPENWIFI() = CPConfiguration_OPENWIFI()[]CPSendCommand_OPENWIFI();

CPConfiguration_OPENWIFI() = network!CP.SetAccessPoint -> network?StateAccessPoint -> network?StateService.Configured ->
                    CPSendCommand_OPENWIFI();
                    
CPSendCommand_OPENWIFI() = CPSetPowerRequest_OPENWIFI() [] CPSetColorRequest_OPENWIFI() [] CPGetLights_OPENWIFI();

CPSetPowerRequest_OPENWIFI() = network!CP.SetPowerRequest -> network?Success-> CPSendCommand_OPENWIFI();
CPSetColorRequest_OPENWIFI() = network!CP.SetColorRequest -> network?Success-> CPSendCommand_OPENWIFI();
CPGetLights_OPENWIFI() = network!CP.GetLights -> network?LightsState -> CPSendCommand_OPENWIFI();
  



SDProc() = SDDiscovery();

SDDiscovery() = network?x.GetService -> network!StateService -> SDNextStage();
SDConfiguration() = network?x.SetAccessPoint -> network!StateAccessPoint -> network!StateService.Configured ->
 			        SDReceiveCommand();
SDNextStage() = SDConfiguration()[]SDReceiveCommand();
 			        
SDReceiveCommand() = SDSetPowerRequest()[]SDSetColorRequest()[]SDGetLights(); 

SDSetPowerRequest() = network?x.SetPowerRequest -> executecommand{SD_connects = x} ->network!Success-> 
					  SDProc();
SDSetColorRequest() = network?x.SetColorRequest -> executecommand{SD_connects = x} -> network!Success-> 
				      SDProc(); 
SDGetLights() = network?x.GetLights -> network!LightsState -> SDReceiveCommand();

//system = AttackerProc() ||| CPProc() ||| SDProc();
 system = CPProc() ||| SDProc();
#define violation  Attacker_connects == SD && SD_connects == Attacker && attacker_execute_command == true;

#assert system deadlockfree; 
#assert system reaches violation;