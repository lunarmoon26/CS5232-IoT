channel network 0; 
channel attackerBuffer 3; 

var CP_connects = Nobody; 
var SD_connects = Nobody; 
var Attacker_connects = Nobody;

var attacker_execute_command = false;


enum{ 
 GetService, 
 StateService, 
 SetAccessPoint, 
 StateAccessPoint, 
 Configured, 
 SetPowerRequest, 
 Success, 
 SetColorRequest, 
 GetLights, 
 LightsState,  
 CP, 
 SD, 
 Attacker, 
 Nobody 
}; 

AttackerProc() = AttackerAsCPDiscovery()[]AttackerAsCPConfiguration()[]AttackerRelay();

AttackerAsCPDiscovery() = network!Attacker.GetService -> network?StateService -> attacker_SD_connected{Attacker_connects = SD} ->
						AttackerNextStage();
AttackerNextStage() = AttackerAsCPConfiguration()[]AttackerAsCPSendCommand();

AttackerAsCPConfiguration() = network!Attacker.SetAccessPoint -> network?StateAccessPoint -> 
						network?StateService.Configured -> attacker_SD_connected{Attacker_connects = SD} ->
						AttackerAsCPSendCommand();

AttackerAsCPSendCommand() = AttackerSetPowerRequest()[] AttackerSetColorRequest()[]AttackerGetLights();
AttackerSetPowerRequest() = network!Attacker.SetPowerRequest -> network?Success-> 
							attackerExecuteCommand{attacker_execute_command = true} -> AttackerProc();
AttackerSetColorRequest() = network!Attacker.SetColorRequest -> network?Success->
							attackerExecuteCommand{attacker_execute_command = true} -> AttackerProc();
AttackerGetLights() = network!Attacker.GetLights -> network?LightsState -> 
							attackerExecuteCommand{attacker_execute_command = true} -> AttackerProc();				   		

AttackerRelay() = attackerBuffer?StateService -> network!CP -> AttackerProc()
               [] attackerBuffer?StateAccessPoint -> network!CP -> AttackerProc();

CPProc() = CPDiscovery(); 

CPDiscovery() = network!CP.GetService -> network?StateService ->CP_SD_connected{CP_connects = SD} -> 
			    CPNextStage();
			    
CPNextStage() = CPConfiguration()[]CPSendCommand();

CPConfiguration() = network!CP.SetAccessPoint -> network?StateAccessPoint -> network?StateService.Configured ->
                    CPSendCommand();
                    
CPSendCommand() = CPSetPowerRequest() [] CPSetColorRequest() [] CPGetLights();

CPSetPowerRequest() = network!CP.SetPowerRequest -> network?Success-> CPProc();
CPSetColorRequest() = network!CP.SetColorRequest -> network?Success-> CPProc();
CPGetLights() = network!CP.GetLights -> network?LightsState -> CPProc();
                  

SDProc() = SDDiscovery();

SDDiscovery() = network?x.GetService -> network!StateService -> SDNextStage();
SDConfiguration() = network?x.SetAccessPoint -> network!StateAccessPoint -> network!StateService.Configured ->
 			        SDReceiveCommand();
SDNextStage() = SDConfiguration()[]SDReceiveCommand();
 			        
SDReceiveCommand() = SDSetPowerRequest()[]SDSetColorRequest()[]SDGetLights(); 

SDSetPowerRequest() = network?x.SetPowerRequest -> executecommand{SD_connects = x} ->network!Success-> 
					  SDProc();
SDSetColorRequest() = network?x.SetColorRequest -> executecommand{SD_connects = x} -> network!Success-> 
				      SDProc(); 
SDGetLights() = network?x.GetLights -> network!LightsState -> SDProc();

system = AttackerProc() ||| CPProc() ||| SDProc();
 
#define violation  Attacker_connects == SD && SD_connects == Attacker && attacker_execute_command == true;

#assert system deadlockfree; 
#assert system reaches violation;