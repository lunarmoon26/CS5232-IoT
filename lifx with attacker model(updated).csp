channel attackerBuffer 3; 
channel network[3] 0; // 0 as openwifi, 1 as wifi, 2 as attacker wifi

channel wifi0 0;

var c = [0, 1, 2]; // 0 as openwifi, 1 as wifi, 2 as attacker wifi
var ch = 0;
var executedBy = Nobody;

var attacker_get_SDInfo = false;
var attacker_get_wifiInfo = false;

enum{ 
 LifxWiFiBeacon, SSID, BSSID, 
 OpenSystemAuthenticationRequest, AssociationResponse,
 GetService, StateService, SetAccessPoint, 
 StateAccessPoint, Configured, 
 SetPowerRequest, SetColorRequest, GetLights, 
 LightsState,
 Success, Station, 
 Username, Password, PasswordEncoded, 
 AttackerWifiUsername, AttackerWifiPassword, AttackerWifiPasswordEncoded,
 CP, SD, Attacker, Nobody
}; 


// Attacker Behaviour

AttackerProc() = AttackerAsCP()[]AttackerAsSD()[]AttackerRelay()[]AttackerConfigAttackerWifi();

AttackerRelay() = attackerBuffer?x.SetPowerRequest -> AttackerSetPowerRequest()[]
				  attackerBuffer?x.SetColorRequest -> AttackerSetColorRequest()[]
				  attackerBuffer?x.GetLights -> AttackerGetLights();
				  
				  
AttackerAsCP() = wifi0?x.LifxWiFiBeacon.SSID.BSSID -> 
				 wifi0!SSID.OpenSystemAuthenticationRequest ->
				 wifi0?AssociationResponse -> AttackerAsCPDiscovery();
					
AttackerAsCPDiscovery() = ifa(ch == c[0]) {
	AttackerAsCPConfiguration()
} else{
	AttackerAsCPConfigured()
};

// Attacker acts as CP to get it's IP address and configuration (StateService) through openwifi channel 
// ch = c[0]
AttackerAsCPConfiguration() = network[ch]!Attacker.GetService -> network[ch]?StateService -> 
							  getSDInfo{attacker_get_SDInfo = true} -> AttackerConfigAttackerWifi();

// Attacker acts as CP to send command through wifi or attackerwifi	
// ch = c[1] 						  
AttackerAsCPConfigured() = network[ch]!Attacker.GetService -> network[ch]?StateService.Configured -> 
						   AttackerSendCommand();						   
 
// Attacker connect to attacker
AttackerConfigAttackerWifi() = network[ch]!Station.AttackerWifiUsername.AttackerWifiPassword -> 
    						   network[ch]?Station.AttackerWifiUsername.AttackerWifiPasswordEncoded ->
    						   AttackerAsCPConfigured();

AttackerSendCommand() = AttackerSetPowerRequest() [] AttackerSetColorRequest() [] AttackerGetLights();

AttackerSetPowerRequest() = network[ch]!Attacker.SetPowerRequest -> 
							network[ch]?Success-> AttackerSendCommand();
AttackerSetColorRequest() = network[ch]!Attacker.SetColorRequest -> 
							network[ch]?Success-> AttackerSendCommand();
AttackerGetLights() =       network[ch]!Attacker.GetLights       -> 
							network[ch]?LightsState -> AttackerSendCommand();

//AttackerAsSDDiscovery() = ifb(ch == c[0]){AttackerAsSDConfiguration()};

AttackerAsSD() = wifi0!Attacker.LifxWiFiBeacon.SSID.BSSID -> 
				 wifi0?SSID.OpenSystemAuthenticationRequest ->
				 wifi0!AssociationResponse ->
				 network[ch]?x.GetService -> 
				 network[ch]!StateService -> 
				 network[ch]?Station.Username.Password ->
				 getWifiInfo{attacker_get_wifiInfo=true} -> AttackerProc();
							  
// Benign CP Process: Discovery Stage - Configuration Stage - Command Stage
CPProc() = CPDiscovery0();

// Discovery Stage
CPDiscovery0() = wifi0?x.LifxWiFiBeacon.SSID.BSSID -> 
				 wifi0!SSID.OpenSystemAuthenticationRequest ->
				 wifi0?AssociationResponse -> CPDiscovery(); 

CPDiscovery() = ifa(ch == c[0]){CPConfiguration()}else {CPConfigured()};

CPConfiguration() = network[ch]!CP.GetService -> network[ch]?StateService -> CPDirectConnect();
  
CPDirectConnect() = CPConfigWifi() [] CPSendCommand();

CPConfigured() = network[ch]!CP.GetService -> network[ch]?StateService.Configured -> CPSendCommand();

// Stage 2: Setup connections with smart devices 

// Configuration on Username and Password when communicating through openwifi
CPConfigWifi() =
  ifa(ch == c[0]) { network[ch]!Station.Username.Password -> 
    				network[ch]?Station.Username.PasswordEncoded -> CPDiscovery()
  } else { CPDiscovery()};

// Stage 3: Send command to smart devices 

CPSendCommand() = CPSetPowerRequest() [] CPSetColorRequest() [] CPGetLights();

CPSetPowerRequest() = network[ch]!CP.SetPowerRequest -> network[ch]?Success		-> CPSendCommand();
CPSetColorRequest() = network[ch]!CP.SetColorRequest -> network[ch]?Success		-> CPSendCommand();
CPGetLights() 		= network[ch]!CP.GetLights 		 -> network[ch]?LightsState -> CPSendCommand();

 
SDProc() = SDDiscovery0();

SDDiscovery0() = wifi0!SD.LifxWiFiBeacon.SSID.BSSID -> 
				 wifi0?SSID.OpenSystemAuthenticationRequest ->
				 wifi0!AssociationResponse ->SDDiscovery();

SDDiscovery() = ifa(ch == c[0]){SDConfiguration()} else{SDConfigured()};

// Case 1: communicate through openwifi
SDConfiguration() = network[ch]?x.GetService -> network[ch]!StateService -> SDDirectConnect();
SDDirectConnect() = SDConfigWifi() [] SDReceiveCommand();

// Case 2: communicate through wifi
SDConfigured() = network[ch]?x.GetService -> network[ch]!StateService.Configured -> SDReceiveCommand();

SystemStage1 = CPDiscovery0()|||SDDiscovery0();  


SDConfigWifi() = ifa (ch == c[0]) {  network[ch]?Station.x.y -> SDConnectToWifi(x, y) } 
				 else { SDDiscovery()};
				 
// Check whether username and password are correct.
// if yes, go back to discovery stage and communicate through wifi 
// if no, go back to discovery stage and communicate through openwifi 

SDConnectToWifi(x, y) = if (x == Username && y == Password) {
    network[ch]!Station.Username.PasswordEncoded -> changeChannel{ch = c[1]} -> SDDiscovery()
  } else if(x == AttackerWifiUsername && y == AttackerWifiPassword){
    network[ch]!Station.AttackerWifiUsername.AttackerWifiPasswordEncoded -> changeChannel{ch = c[2]} -> SDDiscovery()
  }else { SDDiscovery() };

SystemStage2 = CPConfigWifi() ||| SDConfigWifi(); 

SDReceiveCommand() = SDSetPowerRequest() [] SDSetColorRequest() [] SDGetLights();

SDSetPowerRequest() = network[ch]?x.SetPowerRequest -> network[ch]!Success->
					  executeCommand{executedBy = x} -> SDReceiveCommand();
SDSetColorRequest() = network[ch]?x.SetColorRequest -> network[ch]!Success->
					  executeCommand{executedBy = x} -> SDReceiveCommand();
					  
// executeCommand{executedBy = x} may be not suitable for this function
SDGetLights() = network[ch]?x.GetLights -> network[ch]!LightsState ->
					  executeCommand{executedBy = x} -> SDReceiveCommand();

SystemStage3 = SDReceiveCommand() ||| CPSendCommand();
	
system = CPProc() ||| SDProc() ||| AttackerProc();  

#define violation_wifi_disable ch == c[2];
#define violation_controlled_by_attacker executedBy == Attacker;
#define violation_getSDInfo attacker_get_SDInfo == true;
#define violation_get_wifiInfo attacker_get_wifiInfo == true;

#assert system deadlockfree; 
#assert system reaches violation_wifi_disable;
#assert system reaches violation_controlled_by_attacker;
#assert system reaches violation_getSDInfo;
#assert system reaches violation_get_wifiInfo;

