channel openwifi 0;

var CP_connects = Nobody; 
var SD_connects = Nobody; 
var Attacker_connects = Nobody;
var attacker_execute_command = false;
var attackerSendCommand = false;

enum { GetService, StateService, Configured, Station,Username, Password,EncodedPassword, 
 	   SetPowerRequest, Success, SetColorRequest, GetLights, LightsState,  
	   CP, SD, Attacker, Nobody}; 
	   

	
Attacker_Proc() = AttackerAsCP_Configuration();

AttackerAsCP_Configuration() = openwifi!Attacker.Station.Username.Password ->
			     openwifi?Station.Username.EncodedPassword -> Attacker_Proc();


//CP_Proc_ATTACKER() = CP_Discovery_ATTACKER();
//CP_Discovery_ATTACKER() = attackerbuffer!CP.GetService -> attackerbuffer?StateService ->
//			    CP_Configuration_ATTACKER();
//			    
//CP_Configuration_ATTACKER() = attackerbuffer!CP.Station.Username.Password ->
//							  attackerbuffer?Station.Username.EncodedPassword ->
//							  CP_SendCommand_ATTACKER();
//			    
//CP_SendCommand_ATTACKER() = CP_SetPowerRequest_ATTACKER() [] 
//							CP_SetColorRequest_ATTACKER() [] 
//							CP_GetLights_ATTACKER();
//
//CP_SetPowerRequest_ATTACKER() = attackerbuffer!CP.SetPowerRequest -> attackerbuffer?Success-> CP_SendCommand_ATTACKER();
//CP_SetColorRequest_ATTACKER() = attackerbuffer!CP.SetColorRequest -> attackerbuffer?Success-> CP_SendCommand_ATTACKER();
//CP_GetLights_ATTACKER() = attackerbuffer!CP.GetLights -> attackerbuffer?LightsState -> CP_SendCommand_ATTACKER();	
//
//SD_Proc_ATTACKER() = SD_Discovery_ATTACKER();
//
//SD_Discovery_ATTACKER() = attackerbuffer?x.GetService -> openwifi!StateService -> SD_ExecuteCommand_ATTACKER();			    
//
//SD_Configuration_ATTACKER() = attackerbuffer?x.Station.Username.Password ->
//							  attackerbuffer!Station.Username.EncodedPassword ->
//							  SD_ExecuteCommand_ATTACKER();
//							  
//SD_ExecuteCommand_ATTACKER() = SD_SetPowerRequest_ATTACKER()[]
//							   SD_SetColorRequest_ATTACKER()[]
//							   SD_GetLights_ATTACKER();
//
//SD_SetPowerRequest_ATTACKER() = attackerbuffer?x.SetPowerRequest -> executecommand{SD_connects = x} -> 
//								attackerbuffer!Success-> SD_ExecuteCommand_ATTACKER();
//SD_SetColorRequest_ATTACKER() = attackerbuffer?x.SetColorRequest -> executecommand{SD_connects = x} -> 
//								attackerbuffer!Success-> SD_ExecuteCommand_ATTACKER(); 
//								
//SD_GetLights_ATTACKER() = attackerbuffer?x.GetLights -> attackerbuffer!LightsState -> 
//							SD_ExecuteCommand_ATTACKER();
							

// Process through channel openwifi

CP_Proc_OPENWIFI() = CP_Discovery_OPENWIFI();

CP_Discovery_OPENWIFI() = openwifi!CP.GetService -> openwifi?StateService ->
			    CP_Configuration_OPENWIFI();
			    
CP_Configuration_OPENWIFI() = openwifi!CP.Station.Username.Password ->
							  openwifi?Station.Username.EncodedPassword ->
							  CP_SendCommand_OPENWIFI();
			    
CP_SendCommand_OPENWIFI() = CP_SetPowerRequest_OPENWIFI() [] 
							CP_SetColorRequest_OPENWIFI() [] 
							CP_GetLights_OPENWIFI();

CP_SetPowerRequest_OPENWIFI() = openwifi!CP.SetPowerRequest ->  executecommand{attackerSendCommand = true} -> openwifi?Success-> CP_SendCommand_OPENWIFI();
CP_SetColorRequest_OPENWIFI() = openwifi!CP.SetColorRequest -> executecommand{attackerSendCommand = true} -> openwifi?Success-> CP_SendCommand_OPENWIFI();
CP_GetLights_OPENWIFI() = openwifi!CP.GetLights -> openwifi?LightsState -> CP_SendCommand_OPENWIFI();		    



SD_Proc_OPENWIFI() = SD_Discovery_OPENWIFI();

SD_Discovery_OPENWIFI() = openwifi?x.GetService -> openwifi!StateService -> SD_Configuration_OPENWIFI();			    

SD_Configuration_OPENWIFI() = openwifi?x.Station.Username.Password ->
							  openwifi!Station.Username.EncodedPassword ->
							  SD_ExecuteCommand_OPENWIFI();
							  
SD_ExecuteCommand_OPENWIFI() = SD_SetPowerRequest_OPENWIFI()[]
							   SD_SetColorRequest_OPENWIFI()[]
							   SD_GetLights_OPENWIFI();

SD_SetPowerRequest_OPENWIFI() = openwifi?x.SetPowerRequest -> executecommand{SD_connects = x} -> 
								openwifi!Success-> SD_ExecuteCommand_OPENWIFI();
SD_SetColorRequest_OPENWIFI() = openwifi?x.SetColorRequest -> executecommand{SD_connects = x} -> 
								openwifi!Success-> SD_ExecuteCommand_OPENWIFI(); 
								
SD_GetLights_OPENWIFI() = openwifi?x.GetLights -> openwifi!LightsState -> 
							SD_ExecuteCommand_OPENWIFI();
							
systemWithOpenwifi = SD_Proc_OPENWIFI() ||| Attacker_Proc() ||| CP_Proc_OPENWIFI();

#define violation  SD_connects == Attacker && attackerSendCommand == true;

#assert systemWithOpenwifi deadlockfree; 
#assert systemWithOpenwifi reaches violation;