channel wifi 0; 
channel openWifi 0;
channel attackerBuffer 3; 

var CP_connects = Nobody; 
var SD_connects = Nobody; 
var Attacker_connects = Nobody;
var attacker_server_connected = false; 
var SD_connected_to_wifi = false;

enum{ 
 GetService, 
 StateService, 
 SetAccessPoint, 
 StateAccessPoint, 
 Configured, 
 SetPowerRequest, 
 Success, 
 SetColorRequest, 
 GetLights, 
 LightsState,  
 Station, 
 Username, 
 Password, 
 PasswordEncoded, 
 CP, 
 SD, 
 Attacker, 
 Nobody 
}; 


// Attacker Behaviour

//AttackerProc() = AttackerAsSD()[]AttackerAsCPDiscovery()

//AttackerAsSD() = network?SD.LightsState -> attackerBuffer!SD.LightsState -> AttackerProc();

//AttackerAsCPDiscovery() = 
//network!Attacker.GetService ->
//network?StateService ->
//attacker_SD_connected{Attacker_connects = SD} ->
//AttackerAsCPConfiguration() 
//
//
//AttackerAsCPConfiguration() =
// network!Attacker.SetAccessPoint -> 
// network?StateAccessPoint -> 
// network?StateService.Configured ->
// AttackerSendCommand();
//				   		
// AttackerSetPowerRequest() =  
// network!Attacker.SetPowerRequest ->
// AttackerCommandSuccess();
//
//  
// AttackerSetColorRequest() = 
// network!Attacker.SetColorRequest -> 
// AttackerCommandSuccess();
//
// AttackerGetLights() =  
// network!Attacker.GetLights ->  
// network?LightsState -> 
// AttackerSendCommand();				   		
//
//AttackerSendCommand() = AttackerSetPowerRequest()[] AttackerSetColorRequest()[]AttackerGetLights();
//AttackerCommandSuccess() = network?Success-> AttackerSendCommand();

// Stage 1: Discover smart devices 


CPProc() = CPDiscovery();

CPDiscovery() = 
	if(!SD_connected_to_wifi){
		CPConfiguration()
	}
	else{
		CPConfigured()
	};

CPConfiguration() =  
  openWifi!CP.GetService -> 
  openWifi?StateService ->
  CPDirectConnect();
  
CPDirectConnect() = CPConfigWifi() [] CPSendCommandDirect();


CPConfigured() =  
  wifi!CP.GetService -> 
  wifi?StateService.Configured ->
  CPSendCommand();

SDProc = SDDiscovery();

SDDiscovery() = 
	if(!SD_connected_to_wifi){
		SDConfiguration()
	}
	else{
		SDConfigured()
	};

SDConfiguration() =  
  openWifi?x.GetService -> 
  openWifi!StateService ->
  SDDirectConnect();
  
SDDirectConnect() = SDConfigWifi() [] SDReceiveCommandDirect();


SDConfigured() =  
  wifi?x.GetService -> 
  wifi!StateService.Configured ->
  SDReceiveCommand();

SystemStage1 = CPDiscovery()|||SDDiscovery();  

 

// Stage 2: Setup connections with smart devices 

CPConfigWifi() =
  if (!SD_connected_to_wifi) {   
    openWifi!Station.Username.Password -> 
    openWifi?Station.Username.PasswordEncoded -> 
    CPDiscovery()
  } 
  else {
    CPDiscovery()
  };


SDConfigWifi() =
  if (!SD_connected_to_wifi) {   
    openWifi?Station.x.y -> 
    SDConnectToWifi(x, y)
  } 
  else {
    SDDiscovery()
  };

SDConnectToWifi(x, y) =
  if (x == Username && y == Password) {   
    SDConnectedToWifi{SD_connected_to_wifi = true;} -> 
    openWifi!Station.Username.PasswordEncoded -> SDDiscovery()
  } 
  else {
    SDDiscovery()
  };

SystemStage2 = CPConfigWifi() ||| SDConfigWifi(); 



// Stage 3: Send command to smart devices 

 CPSendCommandDirect() = CPSetPowerRequestDirect() [] CPSetColorRequestDirect() [] CPGetLightsDirect();

 CPSetPowerRequestDirect() =  
 openWifi!CP.SetPowerRequest ->
 CPCommandSuccess();

  
 CPSetColorRequestDirect() = 
 openWifi!CP.SetColorRequest -> 
 CPCommandSuccessDirect();

 CPGetLightsDirect() =  
 openWifi!CP.GetLights ->  
 openWifi?LightsState -> 
 CPSendCommand();

 CPCommandSuccessDirect() = openWifi?Success-> CPSendCommandDirect();


 CPSendCommand() = CPSetPowerRequest() [] CPSetColorRequest() [] CPGetLights();

 CPSetPowerRequest() =  
 wifi!CP.SetPowerRequest ->
 CPCommandSuccess();

  
 CPSetColorRequest() = 
 wifi!CP.SetColorRequest -> 
 CPCommandSuccess();

 CPGetLights() =  
 wifi!CP.GetLights ->  
 wifi?LightsState -> 
 CPSendCommand();

 CPCommandSuccess() = wifi?Success-> CPSendCommand();
 
 
 

 SDReceiveCommandDirect() = SDSetPowerRequestDirect() [] SDSetColorRequestDirect() [] SDGetLightsDirect();

 SDSetPowerRequestDirect() =  
 openWifi?x.SetPowerRequest ->
 SDCommandSuccess();

  
 SDSetColorRequestDirect() = 
 openWifi?x.SetColorRequest -> 
 SDCommandSuccessDirect();

 SDGetLightsDirect() =  
 openWifi?x.GetLights ->  
 openWifi!LightsState -> 
 SDReceiveCommand();

 SDCommandSuccessDirect() = openWifi!Success-> SDReceiveCommandDirect();


 SDReceiveCommand() = SDSetPowerRequest() [] SDSetColorRequest() [] SDGetLights();

 SDSetPowerRequest() =  
 wifi?x.SetPowerRequest ->
 SDCommandSuccess();

  
 SDSetColorRequest() = 
 wifi?x.SetColorRequest -> 
 SDCommandSuccess();

 SDGetLights() =  
 wifi?x.GetLights ->  
 wifi!LightsState -> 
 SDReceiveCommand();

 SDCommandSuccess() = wifi!Success-> SDReceiveCommand();
 
SystemStage3 = 
	if(!SD_connected_to_wifi){
	SDReceiveCommandDirect() ||| CPSendCommandDirect()
	}
	else{
	SDReceiveCommand() ||| CPSendCommand()
	};
	

system = CPProc() ||| SDProc();
//attackerSystem = SDReceiveCommand() ||| AttackerSendCommand();

  

//#assert SystemStage1() deadlockfree; 
//#assert SystemStage2() deadlockfree; 
//#define violation SD_connects = Attacker && SD_connects == CP && CP_connects == SD;

#assert system deadlockfree; 
//#assert system reaches violation;
//#assert attackerSystem reaches violation;